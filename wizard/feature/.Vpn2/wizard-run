#!/bin/bash

ACTION=$1
INPUT=$2

pfx="vpn ipsec"
ppfx="vpn ipsec site-to-site peer"
ipfx="vpn ipsec ipsec-interfaces"
cli=cli-shell-api
cmd=/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper

get_data () {
    local var=$1
    local exp=$2
    local val=$(cat $INPUT | jq "$exp" 2>/dev/null)
    eval "$var=$val"
}

get_data_array () {
    local var=$1
    local exp=$2
    local val=$(cat $INPUT | jq "$exp" 2>/dev/null)
    eval "$var=($val)"
}

apply () {
    local ret=0
    local output=''

    eval "destsubs=($(cat $INPUT | jq '."subnets-config"[]."destsub"'))"
    eval "srcsubs=($(cat $INPUT | jq '."subnets-config"[]."srcsub"'))"
    eval "dests=($(cat $INPUT | jq '."vpn-config"[]."dest"'))"
    eval "srcs=($(cat $INPUT | jq '."vpn-config"[]."src"'))"
    eval "descs=($(cat $INPUT | jq '."vpn-config"[]."description"' | sed 's/\$/\\$/g;s/`/\\`/g'))"
    eval "pws=($(cat $INPUT | jq '."vpn-config"[]."pw"' | sed 's/\$/\\$/g;s/`/\\`/g'))"
    eval "ecs=($(cat $INPUT | jq '."vpn-config"[]."encryption"'))"
    eval "hs=($(cat $INPUT | jq '."vpn-config"[]."hash"'))"
    eval "dh=($(cat $INPUT | jq '."vpn-config"[]."dh-group"'))"
    eval "dss=($(cat $INPUT | jq '."vpn-config"[]."destsub"'))"
    eval "sss=($(cat $INPUT | jq '."vpn-config"[]."srcsub"'))"
    get_data afne '.afne'

    tfile=$(mktemp)
    (
    $cmd begin
    ret=0

    tmpf=$(mktemp)
    for ((i = 0; i < ${#dests[@]}; i++)); do
        echo "${dests[i]}" >> $tmpf
    done
    dp=$(sort $tmpf | uniq -d)
    rm -f $tmpf
    if [ -n "$dp" ]; then
        ret=1
    fi

    $cmd delete $pfx || ret=1

    if [ "$afne" == "enable" ]; then
        if ! $cmd set $pfx auto-firewall-nat-exclude enable; then
            ret=1
        fi
    else
        if ! $cmd set $pfx auto-firewall-nat-exclude disable; then
            ret=1
        fi
    fi

    declare -a NS
    local st=0

    for ((i = 0; i < ${#dss[@]}; i++)); do
        ds="${dss[i]}"
        dds=$(echo "$ds" | tr -cd , | wc -c)
        NS+=($(expr $dds + 1))
    done

    for ((i = 0; i < ${#dests[@]}; i++)); do
        if ! $cmd set $ppfx "${dests[i]}"; then
            ret=1
            break
        else
            foo="FOO"
            foo="$foo$i"
            if ! $cmd set $pfx esp-group "$foo" proposal 1 encryption "${ecs[i]}"; then
                ret=1
                break
            fi
            if ! $cmd set $pfx esp-group "$foo" proposal 1 hash "${hs[i]}"; then
                ret=1
                break
            fi
            if ! $cmd set $pfx ike-group "$foo" proposal 1 encryption "${ecs[i]}"; then
                ret=1
                break
            fi
            if ! $cmd set $pfx ike-group "$foo" proposal 1 hash "${hs[i]}"; then
                ret=1
                break
            fi
            if ! $cmd set $pfx ike-group "$foo" proposal 1 dh-group "${dh[i]}"; then
                ret=1
                break
            fi
            if ! $cmd set $ppfx "${dests[i]}" ike-group "$foo"; then
                ret=1
                break
            fi

            if ! $cmd set $ppfx "${dests[i]}" authentication mode pre-shared-secret; then
                ret=1
                break
            fi
            if ! $cmd set $ppfx "${dests[i]}" authentication pre-shared-secret "${pws[i]}"; then
                ret=1
                break
            fi
            if ! $cmd set $ppfx "${dests[i]}" description "${descs[i]}"; then
                ret=1
                break
            fi
            if ! $cmd set $ppfx "${dests[i]}" local-address "${srcs[i]}"; then
                ret=1
                break
            fi

            if [ "${dests[i]}" = "0.0.0.0" ]; then
                if ! $cmd set $ppfx "${dests[i]}" connection-type respond; then
                    ret=1
                    break
                fi
            else
                if ! $cmd set $ppfx "${dests[i]}" connection-type initiate; then
                    ret=1
                    break
                fi
            fi

            local end=$((st + NS[i]))
            local t=1

            for ((j = st; j < end; j++)); do
                if ! $cmd set $ppfx "${dests[i]}" tunnel "$t" esp-group "$foo"; then
                    ret=1
                    break
                fi

                if ! $cmd set $ppfx "${dests[i]}" tunnel "$t" local prefix "${srcsubs[j]}"; then
                    ret=1
                    break
                fi
                if ! $cmd set $ppfx "${dests[i]}" tunnel "$t" remote prefix "${destsubs[j]}"; then
                    ret=1
                    break
                fi
                st=$end
                ((t+=1))
            done
        fi
    done

    if [ $ret == 0 ]; then
        $cmd commit || ret=1
    fi
    if [ $ret == 0 ]; then
        $cmd save || ret=1
    fi
    $cmd end
    exit $ret
    ) >$tfile 2>&1
    ret=$?

    output=$(cat $tfile | jenc)
    rm -f $tfile

    if [ $ret == 0 ]; then
        echo "{\"success\":\"1\"}"
    else
        echo "{\"success\":\"0\",\"error\": $output}"
    fi
}

delete () {
    local ret=0
    local output=''

    tfile=$(mktemp)
    (
    $cmd begin
    ret=0
    $cmd delete $pfx || ret=1

    if [ $ret == 0 ]; then
        $cmd commit || ret=1
    fi
    if [ $ret == 0]; then
        $cmd save || ret=1
    fi
    $cmd end
    exit $ret
    ) >$tfile 2>&1
    ret=$?

    output=$(cat $tfile | jenc)
    rm -f $tfile

    if [ $ret == 0 ]; then
        echo "{\"success\":\"1\"}"
    else
        echo "{\"success\":\"0\",\"error\": $output}"
    fi
}

case "$ACTION" in
    apply)
        apply
        ;;
    delete)
        delete
        ;;
esac
